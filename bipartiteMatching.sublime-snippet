<snippet>
	<content><![CDATA[
const ll N=105;

ll Left[N],Right[N],seen[N];
vll graph[N];
ll n,m;

bool kuhn(ll u)
{
    for(auto v: graph[u])
    {
        if(seen[v]) continue;
        seen[v]=1;
        if(Right[v]==-1 || kuhn(Right[v]))
        {
            Right[v]=u;
            Left[u]=v;
            return true;
        }
    }
    return false;
}

void bipartite_matching()
{
    memo(Left,-1);
    memo(Right,-1);
    ll cnt=0;
    for(ll i=0; i<m; i++) // m = left side er total nodes
    {
        memo(seen,0);
        if(kuhn(i)) cnt++;
    }
    cout<<cnt<<endl;
}

void solve()
{
    cin>>m>>n;
    ll e; cin>>e;
    for(ll i=0; i<e; i++)
    {
        ll u,v; cin>>u>>v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    bipartite_matching();
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bipartiteMatching</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
