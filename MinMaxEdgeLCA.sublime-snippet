<snippet>
	<content><![CDATA[
const ll N=100005;

ll level[N];
ll parent[N];
ll P[N][22]; // sparse table
ll n;
ll maxx[N][22],minn[N][22];

vector<pll> graph[N]; // ff = node, ss = cost

void dfs(ll u)
{
    for(auto v: graph[u])
    {
        if(level[v.ff]==-1)
        {
            level[v.ff]=level[u]+1;
            parent[v.ff]=u;
            maxx[v.ff][0]=minn[v.ff][0]=v.ss;
            dfs(v.ff);
        }
    }
}

void init(ll n)
{
    memset(level,-1,sizeof(level));
    level[0]=0,parent[0]=-1;
    for(ll i=0; i<n; i++)
    {
        for(ll j=0; j<=17; j++)
        {
            maxx[i][j]=ninf,minn[i][j]=inf;
        }
    }
    dfs(0);
    memset(P,-1,sizeof(P));
    for(ll i=0; i<n; i++)
    {
        P[i][0]=parent[i];
    }
    for(ll j=1; (1<<j)<n; j++)
    {
        for(ll i=0; i<n; i++)
        {
            if(P[i][j-1]!=-1)
            {
                P[i][j]=P[P[i][j-1]][j-1];
                maxx[i][j]=max(maxx[i][j-1],maxx[P[i][j-1]][j-1]);
                minn[i][j]=min(minn[i][j-1],minn[P[i][j-1]][j-1]);
            }
        }
    }
}

ll query(ll n, ll p, ll q) // n = number of nodes
{
    if(level[p]<level[q]) swap(p,q);
    ll log=0;
    while(1)
    {
        ll next=log+1;
        if((1<<next)>level[p]) break;
        log++;
    }
    for(ll i=log; i>=0; i--)
    {
        if(level[p]-(1<<i)>=level[q])
        {
            p=P[p][i];
        }
    }
    if(p==q) return p;
    for(ll i=log; i>=0; i--)
    {
        if(P[p][i]!=-1 && P[p][i]!=P[q][i])
        {
            p=P[p][i];
            q=P[q][i];
        }
    }
    return parent[p];
}

pll getMaxMin(ll p, ll lca)
{
    ll maxx_=ninf,minn_=inf;
    ll log=0;
    while(1)
    {
        ll next=log+1;
        if((1<<next)>level[p])
        {
            break;
        }
        log++;
    }
    for(ll i=log; i>=0; i--)
    {
        if(level[p]-(1<<i)>=level[lca])
        {
            maxx_=max(maxx_,maxx[p][i]);
            minn_=min(minn_,minn[p][i]);
            p=P[p][i];
        }
    }
    return {maxx_,minn_};
}

// 0-indexing for LCA but 1-indexing for input, so take u-1, v-1 if input nodes are u, v

void solve()
{
    cin>>n;
    for(ll i=0; i<n-1; i++)
    {
        ll u,v,w; cin>>u>>v>>w;
        graph[u-1].pb({v-1,w});
        graph[v-1].pb({u-1,w});
    }
    init(n);
    // for(ll i=0; i<n; i++)
    // {
    //     for(ll j=0; j<3; j++)
    //     {
    //         cout<<i<<", "<<j<<", "; deb2(maxx[i][j],minn[i][j]);
    //     }
    // }
    ll m; cin>>m;
    while(m--)
    {
        ll u,v; cin>>u>>v;
        ll lca=query(n,u-1,v-1);
        // debx(lca);
        pll p={ninf,inf};
        pll q={ninf,inf};
        if(lca!=u-1) p=getMaxMin(u-1,lca);
        if(lca!=v-1) q=getMaxMin(v-1,lca);
        cout<<min(p.ss,q.ss)<<" "<<max(p.ff,q.ff)<<endl;
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>MinMaxEdgeLCA</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
