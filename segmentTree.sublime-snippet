<snippet>
	<content><![CDATA[
// segment tree (1 indexing)

const ll N=100005;
ll ara[N],tree[4*N];

// b=begin, e=end
void build(ll node, ll b, ll e)
{
    if(b==e)
    {
        tree[node]=ara[b];
        return;
    }
    ll left=node*2;
    ll right=node*2+1;
    ll mid=(b+e)/2;
    build(left,b,mid);
    build(right,mid+1,e);
    // modify this
    tree[node]=tree[left]+tree[right];
}

ll query(ll node, ll b, ll e, ll i, ll j)
{
    if(b>e || i>e || j<b)
    {
        return 0;
    }
    if(b>=i && e<=j)
    {
        return tree[node];
    }
    ll left=node*2;
    ll right=node*2+1;
    ll mid=(b+e)/2;
    ll p1=query(left,b,mid,i,j);
    ll p2=query(right,mid+1,e,i,j);
    return p1+p2;
}

void update(ll node, ll b, ll e, ll i, ll value)
{
    if(b>e || i>e || i<b)
    {
        return;
    }
    if(b==i && e==i)
    {
        tree[node]=value;
        return;
    }
    ll left=node*2;
    ll right=node*2+1;
    ll mid=(b+e)/2;
    update(left,b,mid,i,value);
    update(right,mid+1,e,i,value);
    tree[node]=tree[left]+tree[right];
}

void test()
{
    ll n; cin>>n;
    // 1 indexing
    for(ll i=1; i<=n; i++)
    {
        cin>>ara[i];
    }
    build(1,1,n);
    ll q; cin>>q;
    while(q--)
    {
        ll type; cin>>type;
        if(type==1)
        {
            ll id,val; cin>>id>>val;
            update(1,1,n,id,val);
        }
        else
        {
            ll l,r; cin>>l>>r;
            cout<<query(1,1,n,l,r)<<endl;
        }
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
