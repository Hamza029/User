<snippet>
	<content><![CDATA[
const ll MAX = (1<<19) + 5;

struct info
{
    ll tup[2], indx;
    // tup[0] = rank of 1st half, tup[1] = rank of 2nd half

    bool operator < (const info& a) const
    {
        return (tup[0] != a.tup[0]) ? tup[0] < a.tup[0] : tup[1] < a.tup[1];
    }
}arr[MAX];

ll Rank[20][MAX], step;
ll LCP[MAX];
 
void build_suffix_array(const string& text)
{
    ll n = text.size(), jump;

    for(ll j = 0; j < n; j++)
    {
        // rank suffixes according to 1st char
        Rank[0][j] = text[j];

        memset(arr[j].tup, 0, sizeof(arr[j].tup));
    }

    for(step = 1, jump = 1; jump <= n; step++, jump *= 2)
    {
        for(ll j = 0; j <=n; j++)
        {
            arr[j].indx = j;

            // Rank[step - 1][j] = what was the rank of substring of length 2^(step-1) starting from jth index
            arr[j].tup[0] = Rank[step - 1][j];

            // if 2nd half exists then set the rank accordingly otherwise set rank to -1
            arr[j].tup[1] = (j + jump < n) ? Rank[step - 1][j + jump] : -1;
        }

        sort(arr, arr + n);

        Rank[step][arr[0].indx] = 0;

        for(ll j = 1; j < n; j++)
        {
            if(arr[j].tup[0] == arr[j-1].tup[0] && arr[j].tup[1] == arr[j-1].tup[1])
            {
                // if this substring is equal to previous substring then assign previous rank
                Rank[step][arr[j].indx] = Rank[step][arr[j - 1].indx];
            }
            else
            {
                // if not then assign new rank
                Rank[step][arr[j].indx] = j;
            }
        }
    }
}

void build_LCP_array(const string& text)
{
    LCP[0] = 0;
    ll n = text.size(), i, j, id1, id2;
    for(i = 1; i < n; i++)
    {
        id1 = arr[i - 1].indx;
        id2 = arr[i].indx;
        LCP[i] = 0;
        for(j = step - 1; j >= 0; j--)
        {
            if(Rank[j][id1] == Rank[j][id2] && id1 < n && id2 < n)
            {
                LCP[i] += (1 << j);
                id1 += (1 << j);
                id2 += (1 << j);
            }
        }
        cout << arr[i - 1].indx << " " << arr[i].indx << " " << LCP[i] << endl;
    }
    for(i = 0; i < n; i++)
        cout << i << " " << LCP[i] << endl;
}

getLCP(ll i, ll j)
{
    // return LCP of suffixes starting from i and starting from j

    // LCP(i,j) = min(LCP[pos[i]], LCP[pos[i]+1], LCP[pos[i]+2], ..., LCP[POS[j]])

    // pos[i] = position in arr[] where arr[].indx = i, this can be precalculated in an array

    // minimum in the segment can be caluclated with segment tree
}

void test()
{
    string s; cin>>s;

    s = s + "#";

    build_suffix_array(s);

    build_LCP_array(s);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>suffixArray</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
