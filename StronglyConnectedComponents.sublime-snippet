<snippet>
	<content><![CDATA[
const ll N = 100005;
 
vector<ll> graph[N], tgraph[N], components[N], sgraph[N];
bool vis[N];
ll sccMark[N];
stack<ll> order;
ll nodes, edges, sccNum;
 
void dfs(ll u)
{
    vis[u] = 1;
    for(auto v: graph[u])
    {
        if(!vis[v])
        {
            dfs(v);
        }
    }
    order.push(u);
}
 
void tdfs(ll u, ll mark)
{
    components[mark].push_back(u);
    sccMark[u] = mark;
    vis[u] = 1;
    for(auto v: tgraph[u])
    {
        if(!vis[v])
        {
            tdfs(v, mark);
        }
    }
}
 
void findSCC()
{
    cin>>nodes>>edges;
 
    for(ll i=0; i<edges; i++)
    {
        ll u,v; cin>>u>>v;
        graph[u].push_back(v);
        tgraph[v].push_back(u);
    }
 
    memset(vis,0,sizeof(vis));
 
    for(ll i=1; i<=nodes; i++)
    {
        if(!vis[i])
        {
            dfs(i);
        }
    }
 
    memset(vis, 0, sizeof(vis));
    memset(sccMark, 0, sizeof(sccMark));
 
    sccNum = 0;
 
    while(!order.empty())
    {
        ll top = order.top();
        order.pop();
        if(!vis[top])
        {
            sccNum++;
            tdfs(top, sccNum);
        }
    }
}
 
void build_scc_tree()
{
    for(ll i=1; i<=sccNum; i++)
    {
        set<ll> curr;
        for(auto u: components[i])
        {
            for(auto v: graph[u])
            {
                if(sccMark[v] != sccMark[u])
                {
                    curr.insert(sccMark[v]);
                }
            }
        }
        for(auto u: curr)
        {
            sgraph[i].push_back(u);
        }
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>StronglyConnectedComponents</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
