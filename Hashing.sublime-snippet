<snippet>
	<content><![CDATA[
const int N = 1e6 + 9;
ll modInverse(ll a, ll m) // calculates inverse modulo
{
    ll m0 = m;
    ll y = 0, x = 1;

    if (m == 1)
    {
        return 0;
    }

    while (a > 1)
    {
        ll q = a / m;
        ll t = m;

        m = a % m, a = t;
        t = y;

        y = x - q * y;
        x = t;
    }

    if (x < 0)
    {
        x += m0;
    }

    return x;
}

ll p_pow[N]; // p_pow[i] = p^i % m
ll modIn[N]; // inverse modulo for p_pow[]
ll hash_val[N]; // prefix sum of hash values
const ll p = 31; // base
const ll m = 1e9 + 7; // mod

void compute_hash(string const& s) // precomputes hash_val
{
    hash_val[0] = s[0] - 'a' + 1;
    for (ll i = 1; i < (ll)s.size(); i++)
    {
        hash_val[i] = (hash_val[i - 1] + (s[i] - 'a' + 1) * p_pow[i]) % m;
    }
}

ll get_hash(string const& s) // returns hash value of a string s
{
    ll x = s[0] - 'a' + 1;
    for (ll i = 1; i < (ll)s.size(); i++)
    {
        x = (x + (s[i] - 'a' + 1) * p_pow[i]) % m;

    }
    return x;
}

void powCalc(ll n) // precomputes p_pow[] and hash_val[]
{
    p_pow[0] = 1;
    for (ll i = 1; i <= n; i++)
    {
        p_pow[i] = (p * p_pow[i - 1]) % m;
        modIn[i]  =  modInverse(p_pow[i], m);
    }
}

ll query_hash(ll l, ll r) // calculates hash value of substring in range [l, r]
{
    if (r < l)
    {
        return 0;
    }
    if (l == 0)
    {
        return hash_val[r];
    }
    else
    {
        return ((((hash_val[r] - hash_val[l - 1]) + m) % m) * modIn[l]) % m;
    }
}

// if two substrings of range [l1, r1], [l2, r2] are merged it returns hash value of the merged string
ll mergeHash(ll l1, ll r1, ll l2, ll r2) 
{
    return (query_hash(l1, r1) + query_hash(l2, r2) * p_pow[r1 - l1 + 1]) % m;
}

void test() // for testing the template
{
    ll i, n, t, k, j, x = 0, y = 0;
    string str;
    cin >> str;
    n = (ll)str.size();
    powCalc(n);
    compute_hash(str);
    for (i = 0; i <= n; i++)
    {
        cout << i << " " << hash_val[i] << endl;
    }
    cout << query_hash(2, 3) << endl;
    cout << query_hash(0, 1) << endl;
    return;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Hashing</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
